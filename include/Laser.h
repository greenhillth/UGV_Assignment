#pragma once

#using <System.dll>
#include "NetworkedModule.h"

ref class Laser : public NetworkedModule
{
public:
	Laser(SM_ThreadManagement^ SM_TM, SM_Laser^ SM_Laser);
	error_state setupSharedMemory();
	void threadFunction() override;
	error_state processHeartbeats();
	void shutdownThreads();
	bool getShutdownFlag() override;

	error_state communicate() override;
	error_state checkData();
	error_state processSharedMemory() override;

	error_state connect(String^ hostName, int portNumber) override;
	
	error_state updateReadings();
	error_state sendCommand(String^ command);
	
	~Laser() {};
private:
	array<unsigned char>^ SendData;
	
};

/*

ref struct laserData
{
	unsigned char commandVerif[14];
	unsigned char discard1[14];


};

sRA LMDscandata VersionNumber DeviceNumber
SerialNumber DeviceStatus MessageCounter ScanCounter
PowerUpDuration TransmissionDuration InputStatus OutputStatus
ReservedByteA ScanningFrequency MeasurementFrequency
NumberEncoders [EncoderPosition EncoderSpeed]
NumberChannels16Bit [MeasuredDataContent ScalingFactor
ScalingOffset StartingAngle AngularStepWidth NumberData
[Data_1 Data_n]] NumberChannels8Bit [MeasuredDataContent
ScalingFactor ScalingOffset StartingAngle AngularStepWidth
[NumberData Data_1 Data_n] Position [XPosition YPosition
ZPosition XRotation YRotation ZRotation RotationType] Name
 
 
 

//native data structure
#pragma pack(push,4)
struct GNSS
{
	unsigned int Header; // 4 bytes 0xAA 0x44 0x12 0x1C;
	unsigned char Discards1[40];
	double Northing;
	double Easting;
	double Height;
	unsigned char Discards2[40];
	unsigned int CRC;
};
#pragma pack(pop,4)




int main()
{
	array<unsigned char>^ GNSSData = gcnew array<unsigned char>{ // Three data records => 112 x 3 = 336
				0xaa, 0x44, 0x12, 0x1c, 0xd6, 0x02, 0x02, 0x20, 0x50, 0x00, 0x00, 0x00, 0x64, 0xb4, 0x94, 0x05,
				0xf6, 0xc4, 0x39, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x8c, 0xef, 0x81, 0x08, 0x00, 0x00, 0x00, 0x00,
				0x32, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x76, 0xdf, 0xb9, 0x9e,
				0xb3, 0xc8, 0x57, 0x41, 0xfd, 0xbb, 0x6c, 0xcd, 0xb4, 0x5a, 0x13, 0x41, 0x00, 0x00, 0x60, 0x07,
				0xe8, 0x18, 0x5b, 0x40, 0x81, 0x7c, 0xa5, 0x41, 0x3d, 0x00, 0x00, 0x00, 0x07, 0xb1, 0x8a, 0x3c,
				0xf4, 0x39, 0x03, 0x3d, 0x4c, 0xd7, 0x30, 0x3d, 0x41, 0x41, 0x41, 0x41, 0xcd, 0xcc, 0xac, 0x3f,
				0x00, 0x00, 0x00, 0x00, 0x09, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x04, 0xa3, 0xfd, 0xcc,
				0xaa, 0x44, 0x12, 0x1c, 0xd6, 0x02, 0x02, 0x20, 0x50, 0x00, 0x00, 0x00, 0x64, 0xb4, 0x94, 0x05,
				0x28, 0xc5, 0x39, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x8c, 0xef, 0x81, 0x08, 0x00, 0x00, 0x00, 0x00,
				0x32, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0xde, 0x9d, 0xd0, 0x9e,
				0xb3, 0xc8, 0x57, 0x41, 0x44, 0xc3, 0x35, 0xc8, 0xb4, 0x5a, 0x13, 0x41, 0x00, 0x00, 0x8d, 0x5b,
				0x58, 0x19, 0x5b, 0x40, 0x81, 0x7c, 0xa5, 0x41, 0x3d, 0x00, 0x00, 0x00, 0x16, 0xba, 0x8a, 0x3c,
				0x55, 0x47, 0x03, 0x3d, 0xac, 0xe5, 0x30, 0x3d, 0x41, 0x41, 0x41, 0x41, 0x33, 0x33, 0xb3, 0x3f,
				0x00, 0x00, 0x00, 0x00, 0x09, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x69, 0x6a, 0x83, 0x6e,
				0xaa, 0x44, 0x12, 0x1c, 0xd6, 0x02, 0x02, 0x20, 0x50, 0x00, 0x00, 0x00, 0x64, 0xb4, 0x94, 0x05,
				0x5a, 0xc5, 0x39, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x8c, 0xef, 0x81, 0x08, 0x00, 0x00, 0x00, 0x00,
				0x32, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0xc8, 0xd7, 0xbf, 0x9e,
				0xb3, 0xc8, 0x57, 0x41, 0x60, 0x2d, 0xef, 0xcb, 0xb4, 0x5a, 0x13, 0x41, 0x00, 0x00, 0xa5, 0x6a,
				0xeb, 0x18, 0x5b, 0x40, 0x81, 0x7c, 0xa5, 0x41, 0x3d, 0x00, 0x00, 0x00, 0x48, 0xc3, 0x8a, 0x3c,
				0xed, 0x54, 0x03, 0x3d, 0x48, 0xf4, 0x30, 0x3d, 0x41, 0x41, 0x41, 0x41, 0x9a, 0x99, 0xb9, 0x3f,
				0x00, 0x00, 0x00, 0x00, 0x08, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x54, 0x94, 0xe6, 0x69};
	GNSS myGNSS;
	unsigned char* BytePtr = (unsigned char*)&myGNSS;
	for (int i = 0; i < sizeof(GNSS); i++)
	{
		*(BytePtr + i) = GNSSData[i];
	}

	Console::WriteLine("{0:F3} {1:F3} {2:F3} ", myGNSS.Northing, myGNSS.Easting, myGNSS.Height);

	Console::WriteLine("Size of Data is {0:D} ", sizeof(GNSS));

	Console::ReadKey();

	return 0;
}

*/